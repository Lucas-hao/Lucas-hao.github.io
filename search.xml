<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言实现全排列</title>
      <link href="2020/12/25/permutation/"/>
      <url>2020/12/25/permutation/</url>
      
        <content type="html"><![CDATA[<p>使用方法：回溯法</p><blockquote><p>回溯法（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯<a href="https://baike.baidu.com/item/%E6%9D%A1%E4%BB%B6/1783021">条件</a>的某个<a href="https://baike.baidu.com/item/%E7%8A%B6%E6%80%81/33204">状态</a>的点称为“回溯点”。 ——百度百科</p></blockquote><p>全排列回溯的基本思想：对当前位置依次进行与后面所有位置的一个交换，然后对交换后的当前位置之后的元素进行一个全排列，全排列完毕后，进行回溯：将当前位置与之前交换的位置重新调换，形成原来的排列，然后继续进行下一次交换。</p><p>比如我们想要对<code>[1, 2, 3, 4, 5]</code>进行排列，首先确定第一位数，可以是1， 2， 3 ， 4 ，5中任意一个，下图中我们与3进行交换，那么交换后的后四个数就是<code>[2, 1, 4, 5]</code>，然后对这个数组进行全排列(递归)，最后回溯之后就会回到<code>[1, 2, 3, 4, 5]</code>（每次排列都会回溯，所以最外层回溯的时候的排列和起初一定是一样的），接下来把4作为首位，需要排列的数就是<code>[2, 3, 1, 5]</code>，依次类推。</p><p><img src="permutation.png" alt="图片例子"></p><p>全部代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实现全排列的函数</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 交换数组中两个数的值</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录全排列的次数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the size of the number list: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 动态数组</span>    <span class="token comment">// 初始化</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the number list:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">permute</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The total number of permutation is %d"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// a permutation is found</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> begin<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> begin<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">permute</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> begin<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏抽卡概率模型</title>
      <link href="2020/12/23/gamemodel/"/>
      <url>2020/12/23/gamemodel/</url>
      
        <content type="html"><![CDATA[<p>目前的中国游戏市场，最热门的莫过于免费抽卡手游。游戏厂商为了盈利，设计出有不同规则的卡池，让玩家抽卡获取稀有的人物和武器。这一机制吸引了很多玩家，首先因为手游是免费的，入手门槛较低，其次很多人喜欢抽卡获取角色和武器的成就感。为了更吸引玩家，游戏策划就得设计出能够让大部分玩家，无论是欧皇还是非酋满意的抽卡机制。本文将简要分析目前游戏厂商可能使用的抽卡机制（仅属于个人猜想加一些网上的资料）。</p><h3 id="抽卡机制的大致分类"><a href="#抽卡机制的大致分类" class="headerlink" title="抽卡机制的大致分类"></a>抽卡机制的大致分类</h3><ol><li>最简单的抽卡模型就是每次抽卡的概率都是固定的，也就是说每次抽卡的概率都是$p$,我们可以称之为纯随机。那么玩家第$n$次抽中的随机变量分布就是一个几何分布。这种抽卡模型很明显对于非酋非常不友好，理论上可能存在抽了很多很多次仍然没有抽中的人存在。所以纯随机模型在抽卡游戏中是不会使用的。</li><li>对应于纯随机的，我们可以称之为伪随机（注意这里的伪随机和计算机随机数概念中的伪随机不是一个东西）。伪随机就是说每次抽卡的概率都是是会进行改变的。下面就重点介绍几种可能的伪随机模型。</li></ol><h3 id="伪随机模型"><a href="#伪随机模型" class="headerlink" title="伪随机模型"></a>伪随机模型</h3><ul><li><h4 id="十连保底"><a href="#十连保底" class="headerlink" title="十连保底"></a>十连保底</h4><p>十连保底应该是我们在游戏中最常见到的概率模型。如果连抽十次，前九次都没有抽中的话，那么第十次就必定会抽中。这种概率模型会导致很多玩家都是依靠十连保底，并且概率质量函数图像会在第十次突然上升，显得不均匀。</p><p>例如，如果我们设定抽到A卡的概率为0.1，那么我们得出的该概率质量函数和累积分布函数的图像就是下图。可以算出数学期望为6.5，并且大约60%的玩家在前9次抽到，而所谓的非酋也就是触发保底的玩家占到了40%。</p><img src="/2020/12/23/gamemodel/%E5%8D%81%E8%BF%9E%E4%BF%9D%E5%BA%95.png" class=""><p>如果我们用程序模拟10000次在这种概率模型下的抽卡，我们可以得出下面的分布。从图中可以看出，大部分玩家抽100次会得到16-20个想要得到的。</p><img src="/2020/12/23/gamemodel/%E5%8D%81%E8%BF%9E%E4%BF%9D%E5%BA%95%E6%A8%A1%E6%8B%9F%E7%BB%93%E6%9E%9C.png" class=""><p>这种十连保底的模型一般用于四星角色或者武器。四星虽然没有五星稀有，但是也是需要一定的保障以确保玩家甚至连四星都抽不到。</p></li><li><h4 id="概率增加模型"><a href="#概率增加模型" class="headerlink" title="概率增加模型"></a>概率增加模型</h4><p>那么对于更加稀有的五星角色和武器来说，十连保底肯定就显得太过容易了。这个时候策划一般希望玩家差不多抽几十发可以抽中一个，所以就需要比如100抽保底这样的机制。但是如果这个时候继续采用以上的前面的概率都不变，那么很容易想到这样子的话大部分玩家都会是100发保底…所以就需要调整该概率。</p><p>首先，我们设定一个初始概率$p$，然后如果没有抽中，那么下一次抽卡概率就给他一个增量$\alpha$，如果抽中，那么就回归初始概率。所以，第X次抽中的概率就是$p(x)=p+\alpha\times (x-1)$，概率质量函数$P(X)=\Pi^{x-1}_{i=1}\lbrack(1-p(i))\rbrack\times p(x)=\Pi^{x-1}_{i=1}[(1-p-\alpha\times(i-1))]\times(p+\alpha\times(x-1))$ </p><p>我们设定$p=0.01, \alpha=0.01$，然后画出图像之后发现，这个图像居然很像是一个正态分布的图像，所以顺便把正态分布的图像画了出来对比，虽然也不知道为什么这两张图这么像。</p><img src="/2020/12/23/gamemodel/%E6%A6%82%E7%8E%87%E5%A2%9E%E5%8A%A0%E6%A8%A1%E5%9E%8B.png" class=""><p>在这个概率模型下，由于100次的时候$p(100)=0.01+99\times0.1=1$，所以实现了一个100抽保底的效果。但是策划希望的是100抽保底，并且大部分人应该是在五六十抽的时候抽到的，而在这个模型中，超过90%的人在前二十抽就抽到了，这显然不符合预期。所以在这个模型的基础上，我们需要进行相应的调整，让模型的最高点向右偏移。我们由此可以使用一下模型：前50次抽卡概率固定，后50次抽卡使用上面的模型，每次抽卡概率增加。这样我们得出的该概率质量函数就是</p><script type="math/tex; mode=display">p(x)=\begin{cases}p, & x<50 \\p+\alpha(x-50), &x>=50\end{cases}</script><p>和上面一样，如果需要满足100抽保底的话，让$p=0.02,\alpha=0.02$。其概率质量函数和累积分布函数图像如下：<img src="/2020/12/23/gamemodel/%E6%8B%93%E5%B1%95%E6%A6%82%E7%8E%87%E6%A8%A1%E5%9E%8B.png" class=""></p><p>这张图我认为说可以用作五星的概率模型了。70发之前大部分人都能够抽到，并且集中在40发到70发，占了43.69%。这也可以视作游戏玩家口中的“低保”。</p><p>我们使用上面的模型模拟10000次100连抽，得到的结果如下：</p><img src="/2020/12/23/gamemodel/%E6%8B%93%E5%B1%95%E6%A8%A1%E5%9E%8B%E6%A8%A1%E6%8B%9F%E7%BB%93%E6%9E%9C.png" class=""><p>这个结果个人认为就非常像真实游戏中的结果了，大部分人都只能够抽到1-2发，并且很多人都是依靠低保的（这很真实）</p></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.40407.com/zixun/7986.html">明日方舟抽卡概率和保底机制研</a><br><a href="https://www.jianshu.com/p/031e53e8553c">游戏抽奖概率模型</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
